using System.Linq;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace TupleAwaiterSourceGenerator.Tests;

public class ExtensionMethodsTests
{
    // lang=c#
    const string SAMPLE_CODE = """
                               static async Task Method()
                               {
                                   (int n1, int n2) = await (GetValue(1), GetValueV(2));
                                   (int n3, int n4) = await (GetValueV(3), GetValue(4)).ConfigureAwait(false);
                               
                                   static Task<T> GetValue<T>(T number)
                                   {
                                       return Task.FromResult(number);
                                   }
                                   
                                   static ValueTask<T> GetValueV<T>(T number)
                                   {
                                       return ValueTask.FromResult(number);
                                   }
                               }
                               """;

    // lang=c#
    const string EXPECTED_GENERATED_CODE = """
                                           // <auto-generated/>
                                           
                                           using System;
                                           using System.Runtime.CompilerServices;
                                           using System.Threading.Tasks;
                                           
                                           public static class TupleAwaiterExtensions
                                           {
                                               public static TupleTaskAwaiter<T1, T2> GetAwaiter<T1, T2>(this (Task<T1>, ValueTask<T2>) tasks)
                                               {
                                                   return new TupleTaskAwaiter<T1, T2>(tasks.Item1, tasks.Item2.AsTask(), ConfigureAwaitOptions.ContinueOnCapturedContext);
                                               }
                                           
                                               public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this (Task<T1>, ValueTask<T2>) tasks, bool continueOnCapturedContext)
                                               {
                                                   return new TupleConfiguredTaskAwaitable<T1, T2>(tasks.Item1, tasks.Item2.AsTask(), continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
                                               }
                                           
                                               public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this (Task<T1>, ValueTask<T2>) tasks, ConfigureAwaitOptions options)
                                               {
                                                   return new TupleConfiguredTaskAwaitable<T1, T2>(tasks.Item1, tasks.Item2.AsTask(), options);
                                               }
                                           
                                               public static TupleTaskAwaiter<T1, T2> GetAwaiter<T1, T2>(this (ValueTask<T1>, Task<T2>) tasks)
                                               {
                                                   return new TupleTaskAwaiter<T1, T2>(tasks.Item1.AsTask(), tasks.Item2, ConfigureAwaitOptions.ContinueOnCapturedContext);
                                               }
                                           
                                               public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this (ValueTask<T1>, Task<T2>) tasks, bool continueOnCapturedContext)
                                               {
                                                   return new TupleConfiguredTaskAwaitable<T1, T2>(tasks.Item1.AsTask(), tasks.Item2, continueOnCapturedContext ? ConfigureAwaitOptions.ContinueOnCapturedContext : ConfigureAwaitOptions.None);
                                               }
                                           
                                               public static TupleConfiguredTaskAwaitable<T1, T2> ConfigureAwait<T1, T2>(this (ValueTask<T1>, Task<T2>) tasks, ConfigureAwaitOptions options)
                                               {
                                                   return new TupleConfiguredTaskAwaitable<T1, T2>(tasks.Item1.AsTask(), tasks.Item2, options);
                                               }
                                           
                                           }
                                           
                                           """;

    [Fact]
    public void GenerateExtensionMethods()
    {
        // Arrange
        TupleAwaiterSourceGenerator generator = new();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(TupleAwaiterSourceGenerator), [CSharpSyntaxTree.ParseText(SAMPLE_CODE)]);

        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("ExtensionMethods.g.cs"));

        // Assert
        Assert.Equal(EXPECTED_GENERATED_CODE, generatedFileSyntax.GetText().ToString(), ignoreLineEndingDifferences: true);
    }
}
