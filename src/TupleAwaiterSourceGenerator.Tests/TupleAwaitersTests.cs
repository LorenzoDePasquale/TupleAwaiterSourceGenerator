using System.Linq;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace TupleAwaiterSourceGenerator.Tests;

public class TupleAwaitersTests
{
    // lang=c#
    const string SAMPLE_CODE = """
                               static async Task Method()
                               {
                                   (int n1, int n2) = await (GetValue(1), GetValue(2));
                                   (int n3, int n4) = await (GetValue(3), GetValue(4)).ConfigureAwait(false);
                               
                                   static Task<T> GetValue<T>(T number)
                                   {
                                       return Task.FromResult(number);
                                   }
                               }
                               """;

    // lang=c#
    const string EXPECTED_GENERATED_CODE = """
                                           // <auto-generated/>
                                           
                                           using System;
                                           using System.Runtime.CompilerServices;
                                           using System.Threading.Tasks;

                                           public readonly struct TupleTaskAwaiter<T1, T2> : INotifyCompletion
                                           {
                                               readonly Task<T1> _task1;
                                               readonly Task<T2> _task2;
                                               readonly ConfiguredTaskAwaitable.ConfiguredTaskAwaiter _whenAllAwaiter;
                                           
                                               internal TupleTaskAwaiter(Task<T1> task1, Task<T2> task2, ConfigureAwaitOptions options)
                                               {
                                                   _task1 = task1;
                                                   _task2 = task2;
                                                   _whenAllAwaiter = Task.WhenAll(task1, task2).ConfigureAwait(options).GetAwaiter();
                                               }
                                           
                                               public bool IsCompleted => _whenAllAwaiter.IsCompleted;
                                           
                                               public void OnCompleted(Action continuation) => _whenAllAwaiter.OnCompleted(continuation);
                                           
                                               public (T1, T2) GetResult()
                                               {
                                                   _whenAllAwaiter.GetResult();
                                                   return (_task1.Result, _task2.Result);
                                               }
                                           }
                                           
                                           public readonly struct TupleConfiguredTaskAwaitable<T1, T2>
                                           {
                                               readonly Task<T1> _task1;
                                               readonly Task<T2> _task2;
                                               readonly ConfigureAwaitOptions _options;
                                           
                                               internal TupleConfiguredTaskAwaitable(Task<T1> task1, Task<T2> task2, ConfigureAwaitOptions options)
                                               {
                                                   _task1 = task1;
                                                   _task2 = task2;
                                                   _options = options;
                                               }
                                           
                                               public TupleTaskAwaiter<T1, T2> GetAwaiter() => new(_task1, _task2, _options);
                                           }
                                           
                                           
                                           """;

    [Fact]
    public void GenerateTupleAwaiters()
    {
        // Arrange
        TupleAwaiterSourceGenerator generator = new();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(TupleAwaiterSourceGenerator), [CSharpSyntaxTree.ParseText(SAMPLE_CODE)]);

        // Act
        var runResult = driver.RunGenerators(compilation).GetRunResult();
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("TupleAwaiters.g.cs"));

        // Assert
        Assert.Equal(EXPECTED_GENERATED_CODE, generatedFileSyntax.GetText().ToString(), ignoreLineEndingDifferences: true);
    }
}
